name: dokploy-dev
version: ##VERSION##
description: |-
  DevPod on Dokploy (Development Version)

  This provider allows you to create and manage development workspaces on Dokploy.

  Features:
  - Automatic SSH setup with key-based authentication
  - Docker-in-Docker support for development containers
  - Port mapping for SSH access
  - Secure workspace isolation

  Requirements:
  - Dokploy server with API access
  - Valid API token with application management permissions

icon: https://raw.githubusercontent.com/Dokploy/dokploy/refs/heads/canary/apps/dokploy/logo.png
optionGroups:
  - options:
      - DOKPLOY_SERVER_URL
      - DOKPLOY_API_TOKEN
    name: "Dokploy Configuration"
    defaultVisible: true
  - options:
      - DOKPLOY_PROJECT_NAME
    name: "Advanced Configuration"
    defaultVisible: false
options:
  DOKPLOY_SERVER_URL:
    description: The URL of your Dokploy server (e.g., https://dokploy.example.com)
    required: true
    suggestions:
      - https://dokploy.example.com
      - https://your-dokploy-server.com
  DOKPLOY_API_TOKEN:
    description: Your Dokploy API token (generate from Settings > API)
    required: true
    password: true
  DOKPLOY_PROJECT_NAME:
    description: Dokploy project name for DevPod workspaces
    default: "devpod-workspaces"
  INACTIVITY_TIMEOUT:
    description: "If defined, will automatically stop the VM after the inactivity period"
    default: "10m"
  INJECT_GIT_CREDENTIALS:
    description: "If DevPod should inject git credentials into the remote host"
    default: "true"
  INJECT_DOCKER_CREDENTIALS:
    description: "If DevPod should inject docker credentials into the remote host"
    default: "true"
  AGENT_PATH:
    description: The path where to inject the DevPod agent to.
    default: /opt/devpod/agent
  AGENT_DATA_PATH:
    description: The path where to store the agent data.
    default: /opt/devpod/agent-data

agent:
  path: ${AGENT_PATH}
  dataPath: ${AGENT_DATA_PATH}
  inactivityTimeout: ${INACTIVITY_TIMEOUT}
  injectGitCredentials: ${INJECT_GIT_CREDENTIALS}
  injectDockerCredentials: ${INJECT_DOCKER_CREDENTIALS}
  docker:
    install: true

exec:
  # Create a new workspace
  create: |-
    export DOKPLOY_PROVIDER_DEV=true
    ./dist/dokploy-provider create

  # Delete a workspace
  delete: |-
    export DOKPLOY_PROVIDER_DEV=true
    ./dist/dokploy-provider delete

  # Start a workspace
  start: |-
    export DOKPLOY_PROVIDER_DEV=true
    ./dist/dokploy-provider start

  # Stop a workspace
  stop: |-
    export DOKPLOY_PROVIDER_DEV=true
    ./dist/dokploy-provider stop

  # Get workspace status
  status: |-
    export DOKPLOY_PROVIDER_DEV=true
    ./dist/dokploy-provider status

  # Execute commands via SSH
  command: |-
    export DOKPLOY_PROVIDER_DEV=true
    ./dist/dokploy-provider command
